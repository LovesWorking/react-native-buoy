name: Release

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Release All Packages
    runs-on: ubuntu-latest
    # Skip if commit message starts with "chore: release" to prevent loops
    if: "!startsWith(github.event.head_commit.message, 'chore: release')"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.10.0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm run lint

      - name: Typecheck
        run: pnpm run typecheck

      - name: Build packages
        run: pnpm run build:packages

      - name: Smoke tests
        run: pnpm run smoke

      - name: Generate changeset for all packages
        run: |
          mkdir -p .changeset
          cat > .changeset/auto-release.md << 'EOF'
          ---
          "@react-buoy/shared-ui": patch
          "@react-buoy/core": patch
          "@react-buoy/env": patch
          "@react-buoy/network": patch
          "@react-buoy/storage": patch
          "@react-buoy/react-query": patch
          ---

          Automated patch release for all packages.
          EOF

      - name: Apply version bumps
        run: pnpm changeset version

      - name: Reinstall to update lockfile
        run: pnpm install

      - name: Check for version changes
        id: version_check
        run: |
          # Check if package.json files changed (version bumps)
          if git diff --quiet HEAD -- packages/*/package.json; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No version changes detected"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Version changes detected"
          fi

      - name: Build packages with new versions
        if: steps.version_check.outputs.has_changes == 'true'
        run: pnpm run build:packages

      - name: Publish packages to npm
        if: steps.version_check.outputs.has_changes == 'true'
        id: publish
        run: |
          # Track publish results
          declare -a PUBLISH_RESULTS=()
          FAILED=false

          # Publish each package and track results
          for pkg in "@react-buoy/shared-ui" "@react-buoy/core" "@react-buoy/env" "@react-buoy/network" "@react-buoy/storage" "@react-buoy/react-query"; do
            echo "Publishing $pkg..."

            # Get package directory name from package name
            pkg_dir=$(echo "$pkg" | sed 's/@react-buoy\///')
            case "$pkg_dir" in
              "shared-ui") pkg_dir="shared" ;;
              "core") pkg_dir="devtools-floating-menu" ;;
              "env") pkg_dir="env-tools" ;;
            esac

            # Check if version already exists on npm
            PKG_VERSION=$(node -p "require('./packages/$pkg_dir/package.json').version" 2>/dev/null || echo "")
            if [ -n "$PKG_VERSION" ]; then
              if npm view "$pkg@$PKG_VERSION" version >/dev/null 2>&1; then
                echo "⏭️  $pkg@$PKG_VERSION already published, skipping"
                PUBLISH_RESULTS+=("$pkg: skipped (already published)")
                continue
              fi
            fi

            # Attempt to publish
            if pnpm --filter "$pkg" publish --access public --no-git-checks; then
              echo "✅ Successfully published $pkg"
              PUBLISH_RESULTS+=("$pkg: success")
            else
              echo "❌ Failed to publish $pkg"
              PUBLISH_RESULTS+=("$pkg: failed")
              FAILED=true
              # Continue to try other packages instead of failing immediately
            fi
          done

          # Print summary
          echo "============================================"
          echo "Publish Summary:"
          for result in "${PUBLISH_RESULTS[@]}"; do
            echo "  $result"
          done
          echo "============================================"

          # Fail the step if any package failed
          if [ "$FAILED" = true ]; then
            echo "❌ Some packages failed to publish"
            exit 1
          fi

          echo "✅ All packages published successfully"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Commit version changes
        if: steps.version_check.outputs.has_changes == 'true' && steps.publish.outcome == 'success'
        run: |
          # Add specific files only
          git add packages/*/package.json
          git add packages/*/CHANGELOG.md
          git add pnpm-lock.yaml

          # Commit
          git commit -m "chore: release all packages"

      - name: Push changes and tags
        if: steps.version_check.outputs.has_changes == 'true' && steps.publish.outcome == 'success'
        run: |
          git push origin main --follow-tags

      - name: Rollback on failure
        if: steps.version_check.outputs.has_changes == 'true' && steps.publish.outcome == 'failure'
        run: |
          echo "⚠️  Publishing failed! Version changes will NOT be pushed to GitHub."
          echo "The repository remains in a clean state."
          echo "Fix the publishing issue and try again."
          exit 1
